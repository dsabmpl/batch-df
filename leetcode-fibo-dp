// Bottom Up Approach

class Solution{
    public int fib(int n) {
        if(n<=1){
            return n;
        }
     // Table (Array) , Start with Base case ---> Solve Large Problem
     int dp []= new int[n+1];
     // fill the base case
     dp[0] = 0;
     dp[1] = 1;
     // to fill the dp array
     // 1. fill the base case first
     // 2. then fill this by using RR 
    //int result = fib(n-1) + fib(n-2); // RR
    for(int i = 2; i<=n; i++){
        dp[i] = dp[i-1] + dp[i-2]; // RR
    }
    return dp[n];
    }
}

// class Solution {
//     // Hashing 
//     // Pre Build
//     Map<Integer, Integer> cache = new HashMap<>();
//     // DP - Top Down Approach - Memoization
//     public int fib(int n) {
//         // base case
//         if(n==0 || n==1){
//             return n;
//         } 
//         // before compute , first check in cache
//         if(cache.containsKey(n)){
//             return cache.get(n);
//         }
//         int result = fib(n-1) + fib(n-2);
//         // when i get a fresh result then i cache it
//         cache.put(n, result);
//         return result;
//     }
// }
